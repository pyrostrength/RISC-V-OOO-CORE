interface commonDataBus #(parameter WIDTH = 31, ROB = 2);
								  
								  logic[WIDTH:0] result;
								  logic[ROB:0] robEntry;
								  logic validBroadcast; //Is what's written to CDB a valid signal?
								
								modport arbiter(output result,robEntry,validBroadcast); //arbiter selects instruction to write CDB.
								
								modport reservation_station(input result,robEntry,validBroadcast); //Reservation station needs result and robEntry
								
								modport reorder_buffer(input result,robEntry,validBroadcast); //Reorder buffer also needs result an ROB entry.
								
endinterface							
								
module CDBArbiter  #(parameter WIDTH = 31, ROB = 2)
						  (commonDataBus.arbiter databus,
							input logic[ROB:0] ALURob,branchRob,
							input logic[WIDTH:0] ALUresult,branchResult,
							input logic ALURequest,branchRequest);
							
								//Bus arbitration functionality
								
								logic nxtPointer,pointer; //Instead of in-line initialization assign a variables value through another
								
								logic[1:0] requests,grant;
								
								assign requests = {ALURequest,branchRequest};
								
								logic[WIDTH:0] value;
								
								logic[ROB:0] rob;
								
								logic we = ALURequest | branchRequest;
								
								//Pointer points to respective functional unit.
								//1 for ALU,0 for branch.
								always_comb begin
									grant = 2'b00;
									case(pointer)
										1'b1: begin//ALU request
											if(requests[1]) grant = 2'b10;
											else if(requests[0]) grant = 2'b01;	
										end
										1'b0: begin//Branch request
											if(requests[0]) grant = 2'b01;
											else if(requests[1]) grant = 2'b10;
										end
									endcase
									//Assigning to a result
									value = grant[1] ? ALUResult : (grant[0] ? branchResult : 32'd0);
									
									rob = grant[1] ? ALURob : (grant[0] ? branchRob : 2'd00);
								end
								
								
								//Critical path is shifting out value of pointer then
								//based on its value calculating the grant,the values and rob
								//and then finding nxtPointer. nxtPointer always starts from
								//zero though so this simplifies things.
								//Priority shifting logic
								always_comb begin
									nxtPointer = 1'b0;
									case(grant)
										2'b10: nxtPointer = 1'b0; //Grant priority to branchALU
										2'b01: nxtPointer = 1'b1; //Grant priority to ALU.
										default:nxtPointer = 1'b0;
									endcase
								end
										
								//We only pass a result out if and only if we received sth from functional units.
								always_ff @(posedge clk) begin
										pointer <= nxtPointer;
										databus.result <= value;
										databus.robEntry <= rob; 
										databus.validBroadcast <= we;
								end
endmodule
								
									